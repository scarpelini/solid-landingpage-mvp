webpackJsonp([0x81b8806e4260],{477:function(n,e){n.exports={data:{allComponent:{edges:[{node:{id:"AdaptiveHeight",data:'import React, { Component } from "react";\nimport Slider from "../lib/slider";\n\nexport default class AdaptiveHeight extends Component {\n  render() {\n    var settings = {\n      className: "",\n      dots: true,\n      infinite: true,\n      slidesToShow: 1,\n      slidesToScroll: 1,\n      adaptiveHeight: true\n    };\n    return (\n      <div>\n        <h2>Adaptive height</h2>\n        <Slider {...settings}>\n          <div>\n            <h3>1</h3>\n          </div>\n          <div>\n            <h3>2</h3>\n            <p>Hello</p>\n          </div>\n          <div>\n            <h3>3</h3>\n            <p>See ....</p>\n            <p>Height is adaptive</p>\n          </div>\n          <div>\n            <h3>4</h3>\n          </div>\n          <div>\n            <h3>5</h3>\n          </div>\n          <div>\n            <h3>6</h3>\n          </div>\n        </Slider>\n      </div>\n    );\n  }\n}\n'}},{node:{id:"AppendDots",data:'import React, { Component } from "react";\nimport Slider from "../lib/slider";\n\nexport default class AppendDots extends Component {\n  render() {\n    const settings = {\n      dots: true,\n      infinite: true,\n      speed: 500,\n      slidesToShow: 1,\n      slidesToScroll: 1,\n      appendDots: dots => (\n        <div\n          style={{\n            backgroundColor: "#ddd",\n            borderRadius: "10px",\n            padding: "10px"\n          }}\n        >\n          <ul style={{ margin: "0px" }}> {dots} </ul>\n        </div>\n      ),\n      customPaging: i => (\n        <div\n          style={{\n            width: "30px",\n            color: "blue",\n            border: "1px blue solid"\n          }}\n        >\n          {i + 1}\n        </div>\n      )\n    };\n    return (\n      <div>\n        <h2>Append Dots</h2>\n        <Slider {...settings}>\n          <div>\n            <h3>1</h3>\n          </div>\n          <div>\n            <h3>2</h3>\n          </div>\n          <div>\n            <h3>3</h3>\n          </div>\n          <div>\n            <h3>4</h3>\n          </div>\n          <div>\n            <h3>5</h3>\n          </div>\n          <div>\n            <h3>6</h3>\n          </div>\n        </Slider>\n      </div>\n    );\n  }\n}\n'}},{node:{id:"AsNavFor",data:'import React, { Component } from "react";\nimport Slider from "../lib/slider";\n\nexport default class AsNavFor extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      nav1: null,\n      nav2: null\n    };\n  }\n\n  componentDidMount() {\n    this.setState({\n      nav1: this.slider1,\n      nav2: this.slider2\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <h2>Slider Syncing (AsNavFor)</h2>\n        <h4>First Slider</h4>\n        <Slider\n          asNavFor={this.state.nav2}\n          ref={slider => (this.slider1 = slider)}\n        >\n          <div>\n            <h3>1</h3>\n          </div>\n          <div>\n            <h3>2</h3>\n          </div>\n          <div>\n            <h3>3</h3>\n          </div>\n          <div>\n            <h3>4</h3>\n          </div>\n          <div>\n            <h3>5</h3>\n          </div>\n          <div>\n            <h3>6</h3>\n          </div>\n        </Slider>\n        <h4>Second Slider</h4>\n        <Slider\n          asNavFor={this.state.nav1}\n          ref={slider => (this.slider2 = slider)}\n          slidesToShow={3}\n          swipeToSlide={true}\n          focusOnSelect={true}\n        >\n          <div>\n            <h3>1</h3>\n          </div>\n          <div>\n            <h3>2</h3>\n          </div>\n          <div>\n            <h3>3</h3>\n          </div>\n          <div>\n            <h3>4</h3>\n          </div>\n          <div>\n            <h3>5</h3>\n          </div>\n          <div>\n            <h3>6</h3>\n          </div>\n        </Slider>\n      </div>\n    );\n  }\n}\n'}},{node:{id:"AutoPlay",data:'import React, { Component } from "react";\nimport Slider from "../lib/slider";\n\nexport default class AutoPlay extends Component {\n  render() {\n    const settings = {\n      dots: true,\n      infinite: true,\n      slidesToShow: 3,\n      slidesToScroll: 1,\n      autoplay: true,\n      speed: 2000,\n      autoplaySpeed: 2000,\n      cssEase: "linear"\n    };\n    return (\n      <div>\n        <h2>Auto Play</h2>\n        <Slider {...settings}>\n          <div>\n            <h3>1</h3>\n          </div>\n          <div>\n            <h3>2</h3>\n          </div>\n          <div>\n            <h3>3</h3>\n          </div>\n          <div>\n            <h3>4</h3>\n          </div>\n          <div>\n            <h3>5</h3>\n          </div>\n          <div>\n            <h3>6</h3>\n          </div>\n        </Slider>\n      </div>\n    );\n  }\n}\n'}},{node:{id:"AutoPlayMethods",data:'import React, { Component } from "react";\nimport Slider from "../lib/slider";\n\nexport default class AutoPlayMethods extends Component {\n  constructor(props) {\n    super(props);\n    this.play = this.play.bind(this);\n    this.pause = this.pause.bind(this);\n  }\n  play() {\n    this.slider.slickPlay();\n  }\n  pause() {\n    this.slider.slickPause();\n  }\n  render() {\n    const settings = {\n      dots: true,\n      infinite: true,\n      slidesToShow: 3,\n      slidesToScroll: 1,\n      autoplay: true,\n      autoplaySpeed: 2000\n    };\n    return (\n      <div>\n        <h2>Auto Play & Pause with buttons</h2>\n        <Slider ref={slider => (this.slider = slider)} {...settings}>\n          <div>\n            <h3>1</h3>\n          </div>\n          <div>\n            <h3>2</h3>\n          </div>\n          <div>\n            <h3>3</h3>\n          </div>\n          <div>\n            <h3>4</h3>\n          </div>\n          <div>\n            <h3>5</h3>\n          </div>\n          <div>\n            <h3>6</h3>\n          </div>\n        </Slider>\n        <div style={{ textAlign: "center" }}>\n          <button className="button" onClick={this.play}>\n            Play\n          </button>\n          <button className="button" onClick={this.pause}>\n            Pause\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n'}},{node:{id:"CenterMode",data:'import React, { Component } from "react";\nimport Slider from "../lib/slider";\n\nexport default class CenterMode extends Component {\n  render() {\n    const settings = {\n      className: "center",\n      centerMode: true,\n      infinite: true,\n      centerPadding: "60px",\n      slidesToShow: 3,\n      speed: 500\n    };\n    return (\n      <div>\n        <h2>Center Mode</h2>\n        <Slider {...settings}>\n          <div>\n            <h3>1</h3>\n          </div>\n          <div>\n            <h3>2</h3>\n          </div>\n          <div>\n            <h3>3</h3>\n          </div>\n          <div>\n            <h3>4</h3>\n          </div>\n          <div>\n            <h3>5</h3>\n          </div>\n          <div>\n            <h3>6</h3>\n          </div>\n        </Slider>\n      </div>\n    );\n  }\n}\n'}},{node:{id:"CustomArrows",data:'import React, { Component } from "react";\nimport Slider from "../lib/slider";\n\nfunction SampleNextArrow(props) {\n  const { className, style, onClick } = props;\n  return (\n    <div\n      className={className}\n      style={{ ...style, display: "block", background: "red" }}\n      onClick={onClick}\n    />\n  );\n}\n\nfunction SamplePrevArrow(props) {\n  const { className, style, onClick } = props;\n  return (\n    <div\n      className={className}\n      style={{ ...style, display: "block", background: "green" }}\n      onClick={onClick}\n    />\n  );\n}\n\nexport default class CustomArrows extends Component {\n  render() {\n    const settings = {\n      dots: true,\n      infinite: true,\n      slidesToShow: 3,\n      slidesToScroll: 1,\n      nextArrow: <SampleNextArrow />,\n      prevArrow: <SamplePrevArrow />\n    };\n    return (\n      <div>\n        <h2>Custom Arrows</h2>\n        <Slider {...settings}>\n          <div>\n            <h3>1</h3>\n          </div>\n          <div>\n            <h3>2</h3>\n          </div>\n          <div>\n            <h3>3</h3>\n          </div>\n          <div>\n            <h3>4</h3>\n          </div>\n          <div>\n            <h3>5</h3>\n          </div>\n          <div>\n            <h3>6</h3>\n          </div>\n        </Slider>\n      </div>\n    );\n  }\n}\n'}},{node:{id:"CustomPaging",data:'import React, { Component } from "react";\nimport Slider from "../lib/slider";\nimport { baseUrl } from "./config";\n\nexport default class CenterMode extends Component {\n  render() {\n    const settings = {\n      customPaging: function(i) {\n        return (\n          <a>\n            <img src={`${baseUrl}/abstract0${i + 1}.jpg`} />\n          </a>\n        );\n      },\n      dots: true,\n      dotsClass: "slick-dots slick-thumb",\n      infinite: true,\n      speed: 500,\n      slidesToShow: 1,\n      slidesToScroll: 1\n    };\n    return (\n      <div>\n        <h2>Custom Paging</h2>\n        <Slider {...settings}>\n          <div>\n            <img src={baseUrl + "/abstract01.jpg"} />\n          </div>\n          <div>\n            <img src={baseUrl + "/abstract02.jpg"} />\n          </div>\n          <div>\n            <img src={baseUrl + "/abstract03.jpg"} />\n          </div>\n          <div>\n            <img src={baseUrl + "/abstract04.jpg"} />\n          </div>\n        </Slider>\n      </div>\n    );\n  }\n}\n'}},{node:{id:"DynamicSlides",data:'import React, { Component } from "react";\nimport Slider from "../lib/slider";\n\nexport default class DynamicSlides extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      slides: [1, 2, 3, 4, 5, 6]\n    };\n    this.click = this.click.bind(this);\n  }\n  click() {\n    const { slides } = this.state;\n    this.setState({\n      slides:\n        slides.length === 6 ? [1, 2, 3, 4, 5, 6, 7, 8, 9] : [1, 2, 3, 4, 5, 6]\n    });\n  }\n  render() {\n    const settings = {\n      dots: true,\n      infinite: true,\n      speed: 500,\n      slidesToShow: 3,\n      slidesToScroll: 3\n    };\n    return (\n      <div>\n        <h2>Dynamic slides</h2>\n        <button className="button" onClick={this.click}>\n          Click to change slide count\n        </button>\n        <Slider {...settings}>\n          {this.state.slides.map(function(slide) {\n            return (\n              <div key={slide}>\n                <h3>{slide}</h3>\n              </div>\n            );\n          })}\n        </Slider>\n      </div>\n    );\n  }\n}\n'}},{node:{id:"CustomSlides",data:'import React, { Component } from "react";\nimport Slider from "../lib/slider";\n\nclass CustomSlide extends Component {\n  render() {\n    const { index, ...props } = this.props;\n    return (\n      <div {...props}>\n        <h3>{index}</h3>\n      </div>\n    );\n  }\n}\n\nexport default class SimpleSlider extends Component {\n  render() {\n    const settings = {\n      dots: true,\n      infinite: true,\n      speed: 500,\n      slidesToShow: 1,\n      slidesToScroll: 1\n    };\n    return (\n      <div>\n        <h2>Custom Slides</h2>\n        <Slider {...settings}>\n          <CustomSlide index={1} />\n          <CustomSlide index={2} />\n          <CustomSlide index={3} />\n          <CustomSlide index={4} />\n          <CustomSlide index={5} />\n          <CustomSlide index={6} />\n        </Slider>\n      </div>\n    );\n  }\n}\n'}},{node:{id:"Fade",data:'import React, { Component } from "react";\nimport Slider from "../lib/slider";\nimport { baseUrl } from "./config";\n\nexport default class Fade extends Component {\n  render() {\n    const settings = {\n      dots: true,\n      fade: true,\n      infinite: true,\n      speed: 500,\n      slidesToShow: 1,\n      slidesToScroll: 1\n    };\n    return (\n      <div>\n        <h2>Fade</h2>\n        <Slider {...settings}>\n          <div>\n            <img src={baseUrl + "/abstract01.jpg"} />\n          </div>\n          <div>\n            <img src={baseUrl + "/abstract02.jpg"} />\n          </div>\n          <div>\n            <img src={baseUrl + "/abstract03.jpg"} />\n          </div>\n          <div>\n            <img src={baseUrl + "/abstract04.jpg"} />\n          </div>\n        </Slider>\n      </div>\n    );\n  }\n}\n'}},{node:{id:"FocusOnSelect",data:'import React, { Component } from "react";\nimport Slider from "../lib/slider";\n\nexport default class FocusOnSelect extends Component {\n  render() {\n    const settings = {\n      focusOnSelect: true,\n      infinite: true,\n      slidesToShow: 3,\n      slidesToScroll: 1,\n      speed: 500\n    };\n    return (\n      <div>\n        <h2>FocusOnSelect</h2>\n        <div>Click on any slide to select and make it current slide</div>\n        <Slider {...settings}>\n          <div>\n            <h3>1</h3>\n          </div>\n          <div>\n            <h3>2</h3>\n          </div>\n          <div>\n            <h3>3</h3>\n          </div>\n          <div>\n            <h3>4</h3>\n          </div>\n          <div>\n            <h3>5</h3>\n          </div>\n          <div>\n            <h3>6</h3>\n          </div>\n        </Slider>\n      </div>\n    );\n  }\n}\n'}},{node:{id:"LazyLoad",data:'import React, { Component } from "react";\nimport Slider from "../lib/slider";\nimport { baseUrl } from "./config";\n\nexport default class LazyLoad extends Component {\n  render() {\n    const settings = {\n      dots: true,\n      lazyLoad: true,\n      infinite: true,\n      speed: 500,\n      slidesToShow: 1,\n      slidesToScroll: 1,\n      initialSlide: 2\n    };\n    return (\n      <div>\n        <h2> Lazy Load</h2>\n        <Slider {...settings}>\n          <div>\n            <img src={baseUrl + "/abstract01.jpg"} />\n          </div>\n          <div>\n            <img src={baseUrl + "/abstract02.jpg"} />\n          </div>\n          <div>\n            <img src={baseUrl + "/abstract03.jpg"} />\n          </div>\n          <div>\n            <img src={baseUrl + "/abstract04.jpg"} />\n          </div>\n        </Slider>\n      </div>\n    );\n  }\n}\n'}},{node:{id:"MultipleItems",data:'import React, { Component } from "react";\nimport Slider from "../lib/slider";\n\nexport default class MultipleItems extends Component {\n  render() {\n    const settings = {\n      dots: true,\n      infinite: true,\n      speed: 500,\n      slidesToShow: 3,\n      slidesToScroll: 3\n    };\n    return (\n      <div>\n        <h2> Multiple items </h2>\n        <Slider {...settings}>\n          <div>\n            <h3>1</h3>\n          </div>\n          <div>\n            <h3>2</h3>\n          </div>\n          <div>\n            <h3>3</h3>\n          </div>\n          <div>\n            <h3>4</h3>\n          </div>\n          <div>\n            <h3>5</h3>\n          </div>\n          <div>\n            <h3>6</h3>\n          </div>\n          <div>\n            <h3>7</h3>\n          </div>\n          <div>\n            <h3>8</h3>\n          </div>\n          <div>\n            <h3>9</h3>\n          </div>\n        </Slider>\n      </div>\n    );\n  }\n}\n'}},{node:{id:"MultipleRows",data:'import React, { Component } from "react";\nimport Slider from "../lib/slider";\n\nexport default class MultipleRows extends Component {\n  render() {\n    const settings = {\n      className: "center",\n      centerMode: true,\n      infinite: true,\n      centerPadding: "60px",\n      slidesToShow: 3,\n      speed: 500,\n      rows: 2,\n      slidesPerRow: 2\n    };\n    return (\n      <div>\n        <h2>Multiple Rows</h2>\n        <Slider {...settings}>\n          <div>\n            <h3>1</h3>\n          </div>\n          <div>\n            <h3>2</h3>\n          </div>\n          <div>\n            <h3>3</h3>\n          </div>\n          <div>\n            <h3>4</h3>\n          </div>\n          <div>\n            <h3>5</h3>\n          </div>\n          <div>\n            <h3>6</h3>\n          </div>\n          <div>\n            <h3>7</h3>\n          </div>\n          <div>\n            <h3>8</h3>\n          </div>\n          <div>\n            <h3>9</h3>\n          </div>\n          <div>\n            <h3>10</h3>\n          </div>\n          <div>\n            <h3>11</h3>\n          </div>\n          <div>\n            <h3>12</h3>\n          </div>\n          <div>\n            <h3>13</h3>\n          </div>\n          <div>\n            <h3>14</h3>\n          </div>\n          <div>\n            <h3>15</h3>\n          </div>\n          <div>\n            <h3>16</h3>\n          </div>\n        </Slider>\n      </div>\n    );\n  }\n}\n'}},{node:{id:"PauseOnHover",data:'import React, { Component } from "react";\nimport Slider from "../lib/slider";\n\nexport default class PauseOnHover extends Component {\n  render() {\n    var settings = {\n      dots: true,\n      infinite: true,\n      slidesToShow: 3,\n      slidesToScroll: 1,\n      autoplay: true,\n      autoplaySpeed: 2000,\n      pauseOnHover: true\n    };\n    return (\n      <div>\n        <h2>Pause On Hover</h2>\n        <Slider {...settings}>\n          <div>\n            <h3>1</h3>\n          </div>\n          <div>\n            <h3>2</h3>\n          </div>\n          <div>\n            <h3>3</h3>\n          </div>\n          <div>\n            <h3>4</h3>\n          </div>\n          <div>\n            <h3>5</h3>\n          </div>\n          <div>\n            <h3>6</h3>\n          </div>\n        </Slider>\n      </div>\n    );\n  }\n}\n'}},{node:{id:"PreviousNextMethods",data:'import React, { Component } from "react";\nimport Slider from "../lib/slider";\n\nexport default class PreviousNextMethods extends Component {\n  constructor(props) {\n    super(props);\n    this.next = this.next.bind(this);\n    this.previous = this.previous.bind(this);\n  }\n  next() {\n    this.slider.slickNext();\n  }\n  previous() {\n    this.slider.slickPrev();\n  }\n  render() {\n    const settings = {\n      dots: true,\n      infinite: true,\n      speed: 500,\n      slidesToShow: 1,\n      slidesToScroll: 1\n    };\n    return (\n      <div>\n        <h2>Previous and Next methods</h2>\n        <Slider ref={c => (this.slider = c)} {...settings}>\n          <div key={1}>\n            <h3>1</h3>\n          </div>\n          <div key={2}>\n            <h3>2</h3>\n          </div>\n          <div key={3}>\n            <h3>3</h3>\n          </div>\n          <div key={4}>\n            <h3>4</h3>\n          </div>\n          <div key={5}>\n            <h3>5</h3>\n          </div>\n          <div key={6}>\n            <h3>6</h3>\n          </div>\n        </Slider>\n        <div style={{ textAlign: "center" }}>\n          <button className="button" onClick={this.previous}>\n            Previous\n          </button>\n          <button className="button" onClick={this.next}>\n            Next\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n'}},{node:{id:"Resizable",data:'import React, { Component } from "react";\nimport Slider from "../lib/slider";\n\nexport default class Resizable extends Component {\n  state = {\n    display: true,\n    width: 600\n  };\n  render() {\n    const settings = {\n      dots: true,\n      infinite: true,\n      speed: 500,\n      slidesToShow: 3,\n      slidesToScroll: 1\n    };\n    return (\n      <div>\n        <h2> Resizable Collapsible </h2>\n        <button\n          className="button"\n          onClick={() =>\n            this.setState({\n              width: this.state.width + 100\n            })\n          }\n        >\n          {" "}\n          increase{" "}\n        </button>\n        <button\n          className="button"\n          onClick={() =>\n            this.setState({\n              width: this.state.width - 100\n            })\n          }\n        >\n          {" "}\n          decrease{" "}\n        </button>\n        <button\n          className="button"\n          onClick={() =>\n            this.setState({\n              display: !this.state.display\n            })\n          }\n        >\n          {" "}\n          toggle{" "}\n        </button>\n        <div\n          style={{\n            width: this.state.width + "px",\n            display: this.state.display ? "block" : "none"\n          }}\n        >\n          <Slider {...settings}>\n            <div>\n              <h3>1</h3>\n            </div>\n            <div>\n              <h3>2</h3>\n            </div>\n            <div>\n              <h3>3</h3>\n            </div>\n            <div>\n              <h3>4</h3>\n            </div>\n            <div>\n              <h3>5</h3>\n            </div>\n            <div>\n              <h3>6</h3>\n            </div>\n          </Slider>\n        </div>\n      </div>\n    );\n  }\n}\n'}},{node:{id:"Responsive",data:'import React, { Component } from "react";\nimport Slider from "../lib/slider";\n\nexport default class Responsive extends Component {\n  render() {\n    var settings = {\n      dots: true,\n      infinite: false,\n      speed: 500,\n      slidesToShow: 4,\n      slidesToScroll: 4,\n      initialSlide: 0,\n      responsive: [\n        {\n          breakpoint: 1024,\n          settings: {\n            slidesToShow: 3,\n            slidesToScroll: 3,\n            infinite: true,\n            dots: true\n          }\n        },\n        {\n          breakpoint: 600,\n          settings: {\n            slidesToShow: 2,\n            slidesToScroll: 2,\n            initialSlide: 2\n          }\n        },\n        {\n          breakpoint: 480,\n          settings: {\n            slidesToShow: 1,\n            slidesToScroll: 1\n          }\n        }\n      ]\n    };\n    return (\n      <div>\n        <h2> Responsive </h2>\n        <Slider {...settings}>\n          <div>\n            <h3>1</h3>\n          </div>\n          <div>\n            <h3>2</h3>\n          </div>\n          <div>\n            <h3>3</h3>\n          </div>\n          <div>\n            <h3>4</h3>\n          </div>\n          <div>\n            <h3>5</h3>\n          </div>\n          <div>\n            <h3>6</h3>\n          </div>\n          <div>\n            <h3>7</h3>\n          </div>\n          <div>\n            <h3>8</h3>\n          </div>\n        </Slider>\n      </div>\n    );\n  }\n}\n'}},{node:{id:"Rtl",data:'import React, { Component } from "react";\nimport Slider from "../lib/slider";\n\nexport default class Rtl extends Component {\n  render() {\n    const settings = {\n      dots: true,\n      infinite: true,\n      slidesToShow: 3,\n      slidesToScroll: 1,\n      autoplay: true,\n      autoplaySpeed: 2000,\n      rtl: true\n    };\n    return (\n      <div>\n        <h2>Right to Left</h2>\n        <Slider {...settings}>\n          <div>\n            <h3>1</h3>\n          </div>\n          <div>\n            <h3>2</h3>\n          </div>\n          <div>\n            <h3>3</h3>\n          </div>\n          <div>\n            <h3>4</h3>\n          </div>\n          <div>\n            <h3>5</h3>\n          </div>\n          <div>\n            <h3>6</h3>\n          </div>\n        </Slider>\n      </div>\n    );\n  }\n}\n'}},{node:{id:"SimpleSlider",data:'import React, { Component } from "react";\nimport Slider from "../lib/slider";\n\nexport default class SimpleSlider extends Component {\n  render() {\n    const settings = {\n      dots: true,\n      infinite: true,\n      speed: 500,\n      slidesToShow: 1,\n      slidesToScroll: 1\n    };\n    return (\n      <div>\n        <h2> Single Item</h2>\n        <Slider {...settings}>\n          <div>\n            <h3>1</h3>\n          </div>\n          <div>\n            <h3>2</h3>\n          </div>\n          <div>\n            <h3>3</h3>\n          </div>\n          <div>\n            <h3>4</h3>\n          </div>\n          <div>\n            <h3>5</h3>\n          </div>\n          <div>\n            <h3>6</h3>\n          </div>\n        </Slider>\n      </div>\n    );\n  }\n}\n'}},{node:{id:"SlickGoTo",data:'import React, { Component } from "react";\nimport Slider from "../lib/slider";\nimport { baseUrl } from "./config";\n\nexport default class SlickGoTo extends React.Component {\n  state = {\n    slideIndex: 0,\n    updateCount: 0\n  };\n\n  render() {\n    const settings = {\n      dots: false,\n      infinite: true,\n      speed: 500,\n      slidesToShow: 1,\n      slidesToScroll: 1,\n      afterChange: () =>\n        this.setState(state => ({ updateCount: state.updateCount + 1 })),\n      beforeChange: (current, next) => this.setState({ slideIndex: next })\n    };\n    return (\n      <div>\n        <h2>Slick Go To</h2>\n        <p>Total updates: {this.state.updateCount} </p>\n        <input\n          onChange={e => this.slider.slickGoTo(e.target.value)}\n          value={this.state.slideIndex}\n          type="range"\n          min={0}\n          max={3}\n        />\n        <Slider ref={slider => (this.slider = slider)} {...settings}>\n          <div>\n            <img src={baseUrl + "/abstract01.jpg"} />\n          </div>\n          <div>\n            <img src={baseUrl + "/abstract02.jpg"} />\n          </div>\n          <div>\n            <img src={baseUrl + "/abstract03.jpg"} />\n          </div>\n          <div>\n            <img src={baseUrl + "/abstract04.jpg"} />\n          </div>\n        </Slider>\n      </div>\n    );\n  }\n}\n'}},{node:{id:"SlideChangeHooks",data:'import React, { Component } from "react";\nimport Slider from "../lib/slider";\n\nexport default class SlideChangeHooks extends Component {\n  state = {\n    activeSlide: 0,\n    activeSlide2: 0\n  };\n  render() {\n    const settings = {\n      dots: true,\n      infinite: true,\n      speed: 1000,\n      slidesToShow: 1,\n      slidesToScroll: 1,\n      beforeChange: (current, next) => this.setState({ activeSlide: next }),\n      afterChange: current => this.setState({ activeSlide2: current })\n    };\n    return (\n      <div>\n        <h2>beforeChange and afterChange hooks</h2>\n        <p>\n          BeforeChange => activeSlide: <strong>{this.state.activeSlide}</strong>\n        </p>\n        <p>\n          AfterChange => activeSlide: <strong>{this.state.activeSlide2}</strong>\n        </p>\n        <Slider {...settings}>\n          <div>\n            <h3>1</h3>\n          </div>\n          <div>\n            <h3>2</h3>\n          </div>\n          <div>\n            <h3>3</h3>\n          </div>\n          <div>\n            <h3>4</h3>\n          </div>\n          <div>\n            <h3>5</h3>\n          </div>\n          <div>\n            <h3>6</h3>\n          </div>\n        </Slider>\n      </div>\n    );\n  }\n}\n'}},{node:{id:"UnevenSetsFinite",data:'import React, { Component } from "react";\nimport Slider from "../lib/slider";\n\nexport default class UnevenSetsFinite extends Component {\n  render() {\n    var settings = {\n      dots: true,\n      infinite: false,\n      speed: 500,\n      slidesToScroll: 4,\n      slidesToShow: 4\n    };\n    return (\n      <div>\n        <h2>Uneven sets (finite)</h2>\n        <Slider {...settings}>\n          <div>\n            <h3>1</h3>\n          </div>\n          <div>\n            <h3>2</h3>\n          </div>\n          <div>\n            <h3>3</h3>\n          </div>\n          <div>\n            <h3>4</h3>\n          </div>\n          <div>\n            <h3>5</h3>\n          </div>\n          <div>\n            <h3>6</h3>\n          </div>\n        </Slider>\n      </div>\n    );\n  }\n}\n'}},{node:{id:"SwipeToSlide",data:'import React, { Component } from "react";\nimport Slider from "../lib/slider";\n\nexport default class SwipeToSlide extends Component {\n  render() {\n    const settings = {\n      className: "center",\n      infinite: true,\n      centerPadding: "60px",\n      slidesToShow: 5,\n      swipeToSlide: true,\n      afterChange: function(index) {\n        console.log(\n          `Slider Changed to: ${index + 1}, background: #222; color: #bada55`\n        );\n      }\n    };\n    return (\n      <div>\n        <h2>Swipe To Slide</h2>\n        <Slider {...settings}>\n          <div>\n            <h3>1</h3>\n          </div>\n          <div>\n            <h3>2</h3>\n          </div>\n          <div>\n            <h3>3</h3>\n          </div>\n          <div>\n            <h3>4</h3>\n          </div>\n          <div>\n            <h3>5</h3>\n          </div>\n          <div>\n            <h3>6</h3>\n          </div>\n          <div>\n            <h3>7</h3>\n          </div>\n          <div>\n            <h3>8</h3>\n          </div>\n          <div>\n            <h3>9</h3>\n          </div>\n        </Slider>\n      </div>\n    );\n  }\n}\n'}},{node:{id:"UnevenSetsInfinite",data:'import React, { Component } from "react";\nimport Slider from "../lib/slider";\n\nexport default class UnevenSetsInfinite extends Component {\n  render() {\n    var settings = {\n      dots: true,\n      infinite: true,\n      speed: 500,\n      slidesToScroll: 4,\n      slidesToShow: 4\n    };\n    return (\n      <div>\n        <h2>Uneven sets (infinite)</h2>\n        <Slider {...settings}>\n          <div>\n            <h3>1</h3>\n          </div>\n          <div>\n            <h3>2</h3>\n          </div>\n          <div>\n            <h3>3</h3>\n          </div>\n          <div>\n            <h3>4</h3>\n          </div>\n          <div>\n            <h3>5</h3>\n          </div>\n          <div>\n            <h3>6</h3>\n          </div>\n        </Slider>\n      </div>\n    );\n  }\n}\n'}},{node:{id:"VariableWidth",data:'import React, { Component } from "react";\nimport Slider from "../lib/slider";\n\nexport default class VariableWidth extends Component {\n  render() {\n    const settings = {\n      className: "slider variable-width",\n      dots: true,\n      infinite: true,\n      centerMode: true,\n      slidesToShow: 1,\n      slidesToScroll: 1,\n      variableWidth: true\n    };\n    return (\n      <div>\n        <h2>Variable width</h2>\n        <Slider {...settings}>\n          <div style={{ width: 100 }}>\n            <p>100</p>\n          </div>\n          <div style={{ width: 200 }}>\n            <p>200</p>\n          </div>\n          <div style={{ width: 75 }}>\n            <p>75</p>\n          </div>\n          <div style={{ width: 300 }}>\n            <p>300</p>\n          </div>\n          <div style={{ width: 225 }}>\n            <p>225</p>\n          </div>\n          <div style={{ width: 175 }}>\n            <p>175</p>\n          </div>\n        </Slider>\n      </div>\n    );\n  }\n}\n'}},{node:{id:"VerticalMode",data:'import React, { Component } from "react";\nimport Slider from "../lib/slider";\n\nexport default class VerticalMode extends Component {\n  render() {\n    const settings = {\n      dots: true,\n      infinite: true,\n      slidesToShow: 3,\n      slidesToScroll: 1,\n      vertical: true,\n      verticalSwiping: true,\n      beforeChange: function(currentSlide, nextSlide) {\n        console.log("before change", currentSlide, nextSlide);\n      },\n      afterChange: function(currentSlide) {\n        console.log("after change", currentSlide);\n      }\n    };\n    return (\n      <div>\n        <h2>Vertical Mode</h2>\n        <Slider {...settings}>\n          <div>\n            <h3>1</h3>\n          </div>\n          <div>\n            <h3>2</h3>\n          </div>\n          <div>\n            <h3>3</h3>\n          </div>\n          <div>\n            <h3>4</h3>\n          </div>\n          <div>\n            <h3>5</h3>\n          </div>\n          <div>\n            <h3>6</h3>\n          </div>\n        </Slider>\n      </div>\n    );\n  }\n}\n'}},{node:{id:"config",data:'export const baseUrl =\n  process.env.NODE_ENV === "production"\n    ? "https://s3.amazonaws.com/static.neostack.com/img/react-slick"\n    : "/img/react-slick";\n'}},{node:{id:"VerticalSwipeToSlide",data:'import React, { Component } from "react";\nimport Slider from "../lib/slider";\n\nexport default class VerticalSwipeToSlide extends Component {\n  render() {\n    const settings = {\n      dots: true,\n      infinite: true,\n      slidesToShow: 3,\n      slidesToScroll: 1,\n      vertical: true,\n      verticalSwiping: true,\n      swipeToSlide: true,\n      beforeChange: function(currentSlide, nextSlide) {\n        console.log("before change", currentSlide, nextSlide);\n      },\n      afterChange: function(currentSlide) {\n        console.log("after change", currentSlide);\n      }\n    };\n    return (\n      <div>\n        <h2>Vertical Mode with Swipe To Slide</h2>\n        <Slider {...settings}>\n          <div>\n            <h3>1</h3>\n          </div>\n          <div>\n            <h3>2</h3>\n          </div>\n          <div>\n            <h3>3</h3>\n          </div>\n          <div>\n            <h3>4</h3>\n          </div>\n          <div>\n            <h3>5</h3>\n          </div>\n          <div>\n            <h3>6</h3>\n          </div>\n        </Slider>\n      </div>\n    );\n  }\n}\n'
}},{node:{id:"generateExampleConfigs",data:'const React = require("react");\nconst fs = require("fs");\nconst babel = require("babel-core");\nconst ReactDOMServer = require("react-dom/server");\n\nlet configsObject;\nif (fs.existsSync("./configs.json")) {\n  configsObject = require("./configs.json");\n} else {\n  configsObject = {};\n}\n\nconst fetchExampleString = exampleName => {\n  const exampleString = fs.readFileSync(`examples/${exampleName}.js`, "utf-8");\n  return exampleString;\n};\n\nconst extractConfig = exampleString => {\n  const pattern = /(var|const)\\s+settings\\s*=\\s*(\\{(.|\\n)+?\\n\\s*\\};)/;\n  let extraction = exampleString.match(pattern);\n  if (extraction) extraction = extraction[2];\n  else return null;\n  const propPattern = /(\\w+)\\:((?:.|\\n)+?)(?=(,\\n)|(\\n\\s*};))/g;\n  let match;\n  let matchObject = {};\n  do {\n    match = propPattern.exec(extraction);\n    if (!match) break;\n    if (!matchObject[match[1]]) {\n      matchObject[match[1]] = match[2].trim();\n    }\n  } while (match);\n  return matchObject;\n};\n\nconst extractChildren = exampleString => {\n  const pattern = /\\<Slider(?:.|\\n)*?\\>((.|\\n)*?)\\<\\/Slider\\>/;\n  return exampleString.match(pattern)[1];\n};\n\nconst transpile = exampleString =>\n  babel.transform(exampleString, {\n    plugins: [\n      "transform-react-jsx",\n      "babel-plugin-transform-object-rest-spread",\n      "babel-plugin-transform-class-properties",\n      "babel-plugin-transform-es2015-arrow-functions"\n    ]\n  }).code;\n\nconst fetchExampleConfigs = (fileName, index) => {\n  const exampleName = fileName.substring(0, fileName.length - 3);\n  const exampleString = fetchExampleString(exampleName);\n  const transformedString = transpile(exampleString);\n  let childrenString = extractChildren(exampleString.replace(/\\=\\>/g, "$$$")); // jsx type string\n  try {\n    // react string without jsx\n    childrenString = eval(\n      transpile(\n        `<div name="${exampleName}">` + childrenString + "</div>"\n      ).replace(/baseUrl/g, "\'./img/react-slick\'")\n    );\n    console.log("success");\n  } catch (error) {\n    childrenString = "";\n    console.error("children error:", fileName);\n  }\n  childrenString = ReactDOMServer.renderToString(childrenString); // pure html string\n  let config = extractConfig(transformedString);\n  if (config) {\n    configsObject[exampleName] = {\n      props: config,\n      children: childrenString\n    };\n  } else {\n    console.log("config error:", fileName);\n  }\n};\n\nconst exampleFiles = fs\n  .readdirSync("examples")\n  .filter(file => file.endsWith(".js") && file[0] === file[0].toUpperCase())\n  .forEach((fileName, index) => fetchExampleConfigs(fileName, index));\nfs.writeFileSync(\n  "examples/scripts/configs.json",\n  JSON.stringify(configsObject, null, 4)\n);\n'}},{node:{id:"generateExamples",data:'const fs = require("fs");\nconst exampleConfigs = require("./configs.json");\nconst exec = require("child_process").exec;\n\nvar procCode = exec(\n  "cp -r node_modules/slick-carousel/slick/fonts node_modules/slick-carousel/slick/ajax-loader.gif docs/"\n);\n\nconst toString = obj => {\n  let ret = "{\\n";\n  Object.keys(obj).forEach(key => {\n    if (\n      obj[key].match("function") ||\n      obj[key].match("React.createElement" || obj[key].match("\\n"))\n    ) {\n      return;\n    }\n    if (\n      key.match("style") ||\n      key.match("src") ||\n      key.match("border") ||\n      key.match("settings") ||\n      key.match("responsive")\n    )\n      return;\n    ret += "\\t" + key + ": " + obj[key] + ",\\n";\n  });\n  ret += "}\\n";\n  return ret;\n};\n\nlet bodyHTML = "";\nlet bodyScript = "";\nObject.keys(exampleConfigs).forEach(key => {\n  const props = exampleConfigs[key]["props"];\n  const children = exampleConfigs[key]["children"];\n  if (!props || !children) return;\n  bodyHTML += `\n    <div>\n      <h2>${key}</h2>\n      ${children}\n    </div>\n  `;\n  bodyScript += `\n$(\'[name="${key}"\').slick(${toString(props)})\n  `;\n});\n\nlet HTMLString = `<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset="UTF-8">\n    <link rel="stylesheet" href="./slick.css">\n    <link rel="stylesheet" href="./slick-theme.css">\n    <link rel="stylesheet" href="./docs.css">\n    <script type="text/javascript" src="https://code.jquery.com/jquery-2.2.0.min.js"></script>\n    <script type="text/javascript" src="../node_modules/slick-carousel/slick/slick.min.js"></script>\n    <!--\n    <style>\n      .slick-dots li button:before {\n        content: "•";\n      }\n      .slick-prev:before {\n        content: "←";\n      }\n      .slick-next:before {\n        content: "→";\n      }\n      -->\n    </style>\n  </head>\n  <body>\n    <div class="content">\n      ${bodyHTML}\n    </div>\n    <script type=\'text/javascript\'>\n      $(document).on(\'ready\', function() {\n        ${bodyScript}\n      })\n    </script>\n  </body>\n</html>\n`;\n\nfs.writeFileSync("docs/jquery.html", HTMLString);\n'}},{node:{id:"CenterMode.test",data:'import React from "react";\nimport { mount } from "enzyme";\nimport CenterMode from "../CenterMode";\nimport { html as beautify_html } from "js-beautify";\nimport { clickNext } from "../../__tests__/testUtils";\n\ndescribe("CenterMode Tests", () => {\n  test("Counting test", () => {\n    const slider = mount(<CenterMode />);\n    let totalSlides = slider.find(".slick-slide").length;\n    let clonedSlides = slider.find(".slick-cloned").length;\n    let activeSlides = slider.find(".slick-slide.slick-active").length;\n    expect(totalSlides).toEqual(16);\n    expect(clonedSlides).toEqual(10);\n    expect(activeSlides).toEqual(3);\n    expect(beautify_html(slider.html())).toMatchSnapshot();\n  });\n  test("Positioning test", () => {\n    const slider = mount(<CenterMode />);\n    let currentSlide = slider.find("div.slick-current");\n    let activeSlides = slider.find("div.slick-active");\n    expect(currentSlide.props()["data-index"]).toEqual(0);\n    expect(activeSlides.map(slide => slide.props()["data-index"])).toEqual([\n      -1,\n      0,\n      1\n    ]);\n    expect(beautify_html(slider.html())).toMatchSnapshot();\n  });\n  test("Activity test", () => {\n    const slider = mount(<CenterMode />);\n    let currentSlide = slider.find("div.slick-current");\n    let activeSlides = slider.find("div.slick-active");\n    expect(currentSlide.props()["data-index"]).toEqual(0);\n    expect(activeSlides.map(slide => slide.props()["data-index"])).toEqual([\n      -1,\n      0,\n      1\n    ]);\n\n    clickNext(slider);\n\n    currentSlide = slider.find("div.slick-current");\n    activeSlides = slider.find("div.slick-active");\n    expect(currentSlide.props()["data-index"]).toEqual(1);\n    expect(activeSlides.map(slide => slide.props()["data-index"])).toEqual([\n      0,\n      1,\n      2\n    ]);\n\n    expect(beautify_html(slider.html())).toMatchSnapshot();\n  });\n});\n'}},{node:{id:"FocusOnSelect.test",data:'import React from "react";\nimport { mount } from "enzyme";\nimport { html as beautify_html } from "js-beautify";\nimport { clickNext } from "../../__tests__/testUtils";\nimport FocusOnSelect from "../FocusOnSelect";\n\ndescribe("FocusOnSelect Tests", () => {\n  test("Activity Test", () => {\n    const slider = mount(<FocusOnSelect />);\n    expect(slider.find("div.slick-current").props()["data-index"]).toEqual(0);\n    expect(beautify_html(slider.html())).toMatchSnapshot();\n    slider.find("[data-index=2]").simulate("click");\n    expect(slider.find("div.slick-current").props()["data-index"]).toEqual(2);\n    expect(beautify_html(slider.html())).toMatchSnapshot();\n  });\n});\n'}},{node:{id:"MultipleItems.test",data:'import React from "react";\nimport { mount } from "enzyme";\nimport MultipleItems from "../MultipleItems";\nimport { html as beautify_html } from "js-beautify";\n\ndescribe("Multiple Items", function() {\n  it("should have 9 actual slides and (3(pre) + 9(post)) clone slides", function() {\n    const wrapper = mount(<MultipleItems />);\n    expect(wrapper.find(".slick-slide").length).toEqual(21);\n    expect(wrapper.find(".slick-cloned").length).toEqual(12);\n    expect(beautify_html(wrapper.html())).toMatchSnapshot();\n  });\n  it("should have 3 active slides", function() {\n    const wrapper = mount(<MultipleItems />);\n    expect(wrapper.find(".slick-slide.slick-active").length).toEqual(3);\n    expect(beautify_html(wrapper.html())).toMatchSnapshot();\n  });\n  it("should have 3 dots", function() {\n    const wrapper = mount(<MultipleItems />);\n    expect(wrapper.find(".slick-dots button").length).toEqual(3);\n    expect(beautify_html(wrapper.html())).toMatchSnapshot();\n  });\n  it("should show first 3 slides", function() {\n    const wrapper = mount(<MultipleItems />);\n    expect(\n      wrapper\n        .find(".slick-slide.slick-active")\n        .first()\n        .text()\n    ).toEqual("1");\n    expect(\n      wrapper\n        .find(".slick-slide.slick-active")\n        .at(1)\n        .text()\n    ).toEqual("2");\n    expect(\n      wrapper\n        .find(".slick-slide.slick-active")\n        .last()\n        .text()\n    ).toEqual("3");\n    expect(beautify_html(wrapper.html())).toMatchSnapshot();\n  });\n  it("should show slides from 4 to 6 when next button is clicked", function() {\n    const wrapper = mount(<MultipleItems />);\n    wrapper.find(".slick-next").simulate("click");\n    expect(\n      wrapper\n        .find(".slick-slide.slick-active")\n        .first()\n        .text()\n    ).toEqual("4");\n    expect(\n      wrapper\n        .find(".slick-slide.slick-active")\n        .at(1)\n        .text()\n    ).toEqual("5");\n    expect(\n      wrapper\n        .find(".slick-slide.slick-active")\n        .last()\n        .text()\n    ).toEqual("6");\n    expect(beautify_html(wrapper.html())).toMatchSnapshot();\n  });\n  it("should show last 3 slides when previous button is clicked", function() {\n    const wrapper = mount(<MultipleItems />);\n    wrapper.find(".slick-prev").simulate("click");\n    expect(\n      wrapper\n        .find(".slick-slide.slick-active")\n        .first()\n        .text()\n    ).toEqual("7");\n    expect(\n      wrapper\n        .find(".slick-slide.slick-active")\n        .at(1)\n        .text()\n    ).toEqual("8");\n    expect(\n      wrapper\n        .find(".slick-slide.slick-active")\n        .last()\n        .text()\n    ).toEqual("9");\n    expect(beautify_html(wrapper.html())).toMatchSnapshot();\n  });\n  it("should show slides first 3 slides when middle dot is clicked", function() {\n    const wrapper = mount(<MultipleItems />);\n    wrapper\n      .find(".slick-dots button")\n      .at(0)\n      .simulate("click");\n    expect(\n      wrapper\n        .find(".slick-slide.slick-active")\n        .first()\n        .text()\n    ).toEqual("1");\n    expect(\n      wrapper\n        .find(".slick-slide.slick-active")\n        .at(1)\n        .text()\n    ).toEqual("2");\n    expect(\n      wrapper\n        .find(".slick-slide.slick-active")\n        .last()\n        .text()\n    ).toEqual("3");\n    expect(beautify_html(wrapper.html())).toMatchSnapshot();\n  });\n  it("should show slides from 4 to 6 when middle dot is clicked", function() {\n    const wrapper = mount(<MultipleItems />);\n    wrapper\n      .find(".slick-dots button")\n      .at(1)\n      .simulate("click");\n    expect(\n      wrapper\n        .find(".slick-slide.slick-active")\n        .first()\n        .text()\n    ).toEqual("4");\n    expect(\n      wrapper\n        .find(".slick-slide.slick-active")\n        .at(1)\n        .text()\n    ).toEqual("5");\n    expect(\n      wrapper\n        .find(".slick-slide.slick-active")\n        .last()\n        .text()\n    ).toEqual("6");\n    expect(beautify_html(wrapper.html())).toMatchSnapshot();\n  });\n  it("should show last 3 slides when last dot is clicked", function() {\n    const wrapper = mount(<MultipleItems />);\n    wrapper\n      .find(".slick-dots button")\n      .at(2)\n      .simulate("click");\n    expect(\n      wrapper\n        .find(".slick-slide.slick-active")\n        .first()\n        .text()\n    ).toEqual("7");\n    expect(\n      wrapper\n        .find(".slick-slide.slick-active")\n        .at(1)\n        .text()\n    ).toEqual("8");\n    expect(\n      wrapper\n        .find(".slick-slide.slick-active")\n        .last()\n        .text()\n    ).toEqual("9");\n    expect(beautify_html(wrapper.html())).toMatchSnapshot();\n  });\n});\n'}},{node:{id:"SimpleSlider.test",data:'import React from "react";\nimport { mount } from "enzyme";\nimport SimpleSlider from "../SimpleSlider";\nimport { repeatClicks } from "../../test-helpers";\nimport { html as beautify_html } from "js-beautify";\n\ndescribe("Simple Slider", function() {\n  it("should have 13 slides (1(preclone) + 6(actual) + 6(postclone))", function() {\n    const wrapper = mount(<SimpleSlider />);\n    expect(wrapper.find(".slick-slide").length).toEqual(13);\n  });\n  it("should have 7 clone slides", function() {\n    const wrapper = mount(<SimpleSlider />);\n    expect(wrapper.find(".slick-cloned").length).toEqual(7);\n  });\n  it("should have 1 active slide", function() {\n    const wrapper = mount(<SimpleSlider />);\n    expect(wrapper.find(".slick-slide.slick-active").length).toEqual(1);\n  });\n  it("should have 6 dots", function() {\n    const wrapper = mount(<SimpleSlider />);\n    expect(wrapper.find(".slick-dots").children().length).toEqual(6);\n  });\n  it("should have 1 active dot", function() {\n    const wrapper = mount(<SimpleSlider />);\n    expect(wrapper.find(".slick-dots .slick-active").length).toEqual(1);\n  });\n  it("should have a prev arrow", function() {\n    const wrapper = mount(<SimpleSlider />);\n    expect(wrapper.find(".slick-prev").length).toEqual(1);\n  });\n  it("should have a next arrow", function() {\n    const wrapper = mount(<SimpleSlider />);\n    expect(wrapper.find(".slick-next").length).toEqual(1);\n  });\n\n  it("should got to second slide when next button is clicked", function() {\n    const wrapper = mount(<SimpleSlider />);\n    wrapper.find(".slick-next").simulate("click");\n    expect(\n      wrapper\n        .find(".slick-slide.slick-active")\n        .first()\n        .text()\n    ).toEqual("2");\n    expect(wrapper.find(".slick-dots .slick-active").length).toEqual(1);\n    expect(\n      wrapper\n        .find(".slick-dots")\n        .childAt(1)\n        .hasClass("slick-active")\n    ).toEqual(true);\n  });\n  it("should goto last slide when prev button is clicked", function() {\n    const wrapper = mount(<SimpleSlider />);\n    wrapper.find(".slick-prev").simulate("click");\n    expect(\n      wrapper\n        .find(".slick-slide.slick-active")\n        .first()\n        .text()\n    ).toEqual("6");\n    expect(wrapper.find(".slick-dots .slick-active").length).toEqual(1);\n    expect(\n      wrapper\n        .find(".slick-dots")\n        .childAt(5)\n        .hasClass("slick-active")\n    ).toEqual(true);\n  });\n  it("should goto 4th slide when 4th dot is clicked", function() {\n    const wrapper = mount(<SimpleSlider />);\n    wrapper\n      .find(".slick-dots button")\n      .at(3)\n      .simulate("click");\n    expect(\n      wrapper\n        .find(".slick-slide.slick-active")\n        .first()\n        .text()\n    ).toEqual("4");\n    expect(wrapper.find(".slick-dots .slick-active").length).toEqual(1);\n    expect(\n      wrapper\n        .find(".slick-dots")\n        .childAt(3)\n        .hasClass("slick-active")\n    ).toEqual(true);\n  });\n  // it(\'should come back to 1st slide after 6 clicks on next button\', function () {\n  //   // waitForAnimate option is causing problem for this test\n  //   const wrapper = mount(<SimpleSlider />);\n  //   wrapper.find(\'.slick-next\').first().simulate(\'click\').simulate(\'click\')\n  //   // wrapper.find(\'.slick-prev\').first().simulate(\'click\')\n  //   // wrapper.find(\'.slick-next\').first().simulate(\'click\')\n  //   // console.log(nextButton)\n  //   // nextButton.simulate(\'click\').simulate(\'click\')\n  //   // nextButton.simulate(\'click\')\n  //   // repeatClicks(wrapper.find(\'.slick-next\'), 1)\n  //   expect(wrapper.find(\'.slick-slide.slick-active\').first().text()).toEqual(\'1\');\n  //   expect(wrapper.find(\'.slick-dots .slick-active\').length).toEqual(1);\n  //   expect(wrapper.find(\'.slick-dots\').childAt(0).hasClass(\'slick-active\')).toEqual(true)\n  // })\n});\n\ndescribe("Simple Slider Snapshots", function() {\n  it("slider initial state", function() {\n    const wrapper = mount(<SimpleSlider />);\n    expect(beautify_html(wrapper.html())).toMatchSnapshot();\n  });\n  it("click on next button", function() {\n    const wrapper = mount(<SimpleSlider />);\n    wrapper.find(".slick-next").simulate("click");\n    expect(beautify_html(wrapper.html())).toMatchSnapshot();\n  });\n  it("click on prev button", function() {\n    const wrapper = mount(<SimpleSlider />);\n    wrapper.find(".slick-prev").simulate("click");\n    expect(beautify_html(wrapper.html())).toMatchSnapshot();\n  });\n  it("click on 3rd dot", function() {\n    const wrapper = mount(<SimpleSlider />);\n    wrapper\n      .find(".slick-dots button")\n      .at(2)\n      .simulate("click");\n    expect(beautify_html(wrapper.html())).toMatchSnapshot();\n  });\n});\n'}},{node:{id:"SlickGoTo.test",data:'import React from "react";\nimport { mount } from "enzyme";\nimport SlickGoTo from "../SlickGoTo";\n\ndescribe.skip("SlickGoTo", () => {\n  it("should goto 2nd slide", () => {\n    const wrapper = mount(<SlickGoTo />);\n    wrapper.find("input").simulate("change", { target: { value: 1 } });\n    expect(wrapper.find(".slick-slide.slick-active img").props().src).toEqual(\n      "/img/react-slick/abstract02.jpg"\n    );\n  });\n  it("should goto 2nd slide, even if input is number in string format", () => {\n    const wrapper = mount(<SlickGoTo />);\n    wrapper.find("input").simulate("change", { target: { value: "1" } });\n    expect(wrapper.find(".slick-slide.slick-active img").props().src).toEqual(\n      "/img/react-slick/abstract02.jpg"\n    );\n  });\n  it("should remain at 1st slide", () => {\n    const wrapper = mount(<SlickGoTo />);\n    wrapper.find("input").simulate("change", { target: { value: 0 } });\n    expect(wrapper.find(".slick-slide.slick-active img").props().src).toEqual(\n      "/img/react-slick/abstract01.jpg"\n    );\n  });\n  it.skip("should go to 1st slide from another 3rd slide", () => {\n    // skipped because two simultaneous clicks dont\' work with css and speed>0\n    const wrapper = mount(<SlickGoTo waitForAnimate={false} />);\n    wrapper.find("input").simulate("change", { target: { value: 3 } });\n    wrapper.find("input").simulate("change", { target: { value: 0 } });\n    expect(wrapper.find(".slick-slide.slick-active img").props().src).toEqual(\n      "/img/react-slick/abstract01.jpg"\n    );\n  });\n});\n'}},{node:{id:"UnevenSets.test",data:'import React from "react";\nimport { mount } from "enzyme";\nimport UnevenSetsFinite from "../UnevenSetsFinite";\nimport UnevenSetsInfinite from "../UnevenSetsInfinite";\nimport { html as beautify_html } from "js-beautify";\nimport { clickNext } from "../../__tests__/testUtils";\n\ndescribe("UnevenSets Finite", () => {\n  test("Counting test", () => {\n    const slider = mount(<UnevenSetsFinite />);\n    let totalSlides = slider.find(".slick-slide").length;\n    let clonedSlides = slider.find(".slick-cloned").length;\n    let activeSlides = slider.find(".slick-slide.slick-active").length;\n    let dots = slider.find(".slick-dots").children().length;\n    expect(totalSlides).toEqual(6);\n    expect(clonedSlides).toEqual(0);\n    expect(activeSlides).toEqual(4);\n    expect(dots).toEqual(2);\n    expect(beautify_html(slider.html())).toMatchSnapshot();\n  });\n  test("Positioning test", () => {\n    const slider = mount(<UnevenSetsFinite />);\n    let currentSlide = slider.find("div.slick-current");\n    let activeSlides = slider.find("div.slick-active");\n    expect(currentSlide.props()["data-index"]).toEqual(0);\n    expect(activeSlides.map(slide => slide.props()["data-index"])).toEqual([\n      0,\n      1,\n      2,\n      3\n    ]);\n    expect(beautify_html(slider.html())).toMatchSnapshot();\n  });\n  test("Activity test", () => {\n    const slider = mount(<UnevenSetsFinite />);\n    let currentSlide = slider.find("div.slick-current");\n    let activeSlides = slider.find("div.slick-active");\n    expect(currentSlide.props()["data-index"]).toEqual(0);\n    expect(activeSlides.map(slide => slide.props()["data-index"])).toEqual([\n      0,\n      1,\n      2,\n      3\n    ]);\n\n    clickNext(slider);\n\n    currentSlide = slider.find("div.slick-current");\n    activeSlides = slider.find("div.slick-active");\n    expect(currentSlide.props()["data-index"]).toEqual(4);\n    expect(activeSlides.map(slide => slide.props()["data-index"])).toEqual([\n      4,\n      5\n    ]);\n\n    clickNext(slider);\n\n    currentSlide = slider.find("div.slick-current");\n    activeSlides = slider.find("div.slick-active");\n    expect(currentSlide.props()["data-index"]).toEqual(4);\n    expect(activeSlides.map(slide => slide.props()["data-index"])).toEqual([\n      4,\n      5\n    ]);\n\n    expect(beautify_html(slider.html())).toMatchSnapshot();\n  });\n});\n\ndescribe("UnevenSets Infinite", () => {\n  test("Counting test", () => {\n    const slider = mount(<UnevenSetsInfinite />);\n    let totalSlides = slider.find(".slick-slide").length;\n    let clonedSlides = slider.find(".slick-cloned").length;\n    let activeSlides = slider.find(".slick-slide.slick-active").length;\n    let dots = slider.find(".slick-dots").children().length;\n    expect(totalSlides).toEqual(16);\n    expect(clonedSlides).toEqual(10);\n    expect(activeSlides).toEqual(4);\n    expect(dots).toEqual(2);\n    expect(beautify_html(slider.html())).toMatchSnapshot();\n  });\n  test("Positioning test", () => {\n    const slider = mount(<UnevenSetsInfinite />);\n    let currentSlide = slider.find("div.slick-current");\n    let activeSlides = slider.find("div.slick-active");\n    expect(currentSlide.props()["data-index"]).toEqual(0);\n    expect(activeSlides.map(slide => slide.props()["data-index"])).toEqual([\n      0,\n      1,\n      2,\n      3\n    ]);\n    expect(beautify_html(slider.html())).toMatchSnapshot();\n  });\n  test("Activity test", () => {\n    const slider = mount(<UnevenSetsInfinite />);\n    let currentSlide = slider.find("div.slick-current");\n    let activeSlides = slider.find("div.slick-active");\n    expect(currentSlide.props()["data-index"]).toEqual(0);\n    expect(activeSlides.map(slide => slide.props()["data-index"])).toEqual([\n      0,\n      1,\n      2,\n      3\n    ]);\n\n    clickNext(slider);\n\n    currentSlide = slider.find("div.slick-current");\n    activeSlides = slider.find("div.slick-active");\n    expect(currentSlide.props()["data-index"]).toEqual(4);\n    expect(activeSlides.map(slide => slide.props()["data-index"])).toEqual([\n      4,\n      5,\n      6,\n      7\n    ]);\n    expect(beautify_html(slider.html())).toMatchSnapshot();\n  });\n});\n'}},{node:{id:"sample.test",data:'import React from "react";\nimport { mount } from "enzyme";\n\nexport default class Counter extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      count: 0\n    };\n  }\n  render() {\n    return (\n      <button onClick={() => this.setState({ count: this.state.count + 1 })}>\n        Count {this.state.count}\n      </button>\n    );\n  }\n}\n\ndescribe("sample counter test", function() {\n  it("mutliple counts", function() {\n    const wrapper = mount(<Counter />);\n    wrapper.simulate("click").simulate("click");\n    expect(wrapper.text()).toEqual("Count 2");\n  });\n});\n'}}]}},pathContext:{}}}});